{"version":3,"sources":["components/Button.js","components/Header.js","components/Footer.js","components/Task.js","components/Tasks.js","components/AddTask.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Button","color","text","onClick","style","backgroundColor","className","defaultProps","Header","title","date","onAdd","showAdd","location","useLocation","pathname","Footer","to","task","onDelete","onToggle","reminder","onDoubleClick","id","cursor","day","Tasks","tasks","map","Task","AddTask","useState","setText","setDay","setReminder","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","checked","currentTarget","About","App","showAddTask","setShowAddTask","setTasks","Date","toString","split","useEffect","a","fetchTasks","tasksFromServer","getTasks","fetch","res","json","data","fetchTask","addTask","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updTask","fontSize","path","exact","render","props","length","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21ba18e9.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n//PropTypes imported\r\n\r\nconst Button = ({color, text, onClick}) => {\r\n    return (\r\n        <button onClick={onClick} style={{backgroundColor: color}} className='btn'>{text}</button>\r\n        //button with an nClick of onClick, a backgroundColor of color, a className of 'btn', and the text set as text\r\n    )\r\n}\r\n\r\nButton.defaultProps = {\r\n    color: 'steelblue'\r\n    //default color is 'steelblue'\r\n}\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string,\r\n    //text is a string\r\n    color: PropTypes.string,\r\n    //color is a string\r\n    onClick: PropTypes.func.isRequired,\r\n    //text is a function\r\n}\r\n\r\nexport default Button\r\n","import PropTypes from 'prop-types'\r\n//PropTypes imported\r\nimport {useLocation} from 'react-router-dom'\r\n//Button component imported\r\nimport Button from './Button'\r\n//Button component imported\r\n\r\nconst Header = ({title, date, onAdd, showAdd}) => {\r\n    const location = useLocation()\r\n    //variable location equal to the useLocation function\r\n    \r\n    return (\r\n        <header className='header'>\r\n            <h1>{title}</h1>\r\n            {/* h1 for header with its text set as title */}\r\n            <p>{date}</p>\r\n            {/* p for header with its text set as date */}\r\n            <br></br>\r\n            {location.pathname === '/' && (<Button color={showAdd ? 'red' : 'green'} text={showAdd ? 'Close' : 'Add'} onClick={onAdd} />)}\r\n            {/* if the location's pathname is equal to '/', a Button component with color, if showAdd is true, set as 'red', otherwise color is set as 'green', text, if showAdd is true, is set as 'Close', otherwise text is set as 'Add', and onClick set as the onAdd function, appears */}\r\n        </header>\r\n        //Header with header class\r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    title: 'Task Tracker'\r\n    //default title is Task Tracker\r\n}\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    //title is required as a string\r\n}\r\n\r\nexport default Header\r\n","import {Link} from 'react-router-dom'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Copyright &copy; 2021</p>\r\n            {/* p for the footer with its text set as 'Copyright &copy; 2021' */}\r\n            <p>Favorite Musician: Danny Elfman</p>\r\n            {/* p for the footer with its text set as 'Favorite Musician: Danny Elfman' */}\r\n            <Link to=\"/about\">About</Link>\r\n            {/* Link for the footer with to set as '/about' and its text set as 'About' */}\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import {FaTimes} from 'react-icons/fa'\r\n//FaTimes component imported as a react icon\r\n\r\nconst task = ({task, onDelete, onToggle}) => {\r\n    return (\r\n        <div className={`task ${task.reminder ? 'reminder' : ''}`} onDoubleClick={() => onToggle(task.id)}>\r\n            <h3>{task.text} <FaTimes style={{color: 'red', cursor: 'pointer'}} onClick={() => onDelete(task.id)} /></h3>\r\n            {/* h3 created, with text set as task.text and the FaTimes component, which is styled as having the color red and a pointer cursor, and having an onClick of a function that activates the onDelete function with a parameter of task.id */}\r\n            <p>{task.day}</p>\r\n            {/* p created, with text set as task.day */}\r\n        </div>\r\n        //div with a className of 'task' and whatever task.reminder is set to, and the onDoubleClick is set as a function that activates the onToggle function, with a parameter of task.id\r\n    )\r\n}\r\n\r\nexport default task\r\n","import Task from './Task'\r\n//Task component imported\r\n\r\nconst Tasks = ({tasks, onDelete, onToggle}) => {\r\n    return (\r\n        <>\r\n            {tasks.map((task) => (<Task key={task.id} task={task} onDelete={onDelete} onToggle={onToggle} />))}\r\n            {/* Tasks created, with key set as tasks.id, task set as task, onDelete set as onDelete, and onToggle set as onToggle */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Tasks\r\n","import {useState} from 'react'\r\n//useState imported\r\n\r\nconst AddTask = ({onAdd}) => {\r\n    const [text, setText] = useState('')\r\n    //variable of text, with a method of setText, set as useState with a parameter of a blank string\r\n    const [day, setDay] = useState('')\r\n    //variable of day, with a method of setDay, set as useState with a parameter of a blank string\r\n    const [reminder, setReminder] = useState(false)\r\n    //variable of reminder, with a method of setReminder, set as useState with a parameter of false\r\n\r\n    const onSubmit = (e) => {\r\n        //function with parameter of e, for the clicked element\r\n        e.preventDefault()\r\n        //clicked element doesn't submit a page\r\n\r\n        if(!text) {\r\n            alert('Please add a task')\r\n            return\r\n        }\r\n        //text is empty, an alert pops up and it returns\r\n\r\n        onAdd({text, day, reminder})\r\n        //onAdd functin activated with parameters of text, day, and reminder\r\n\r\n        setText('')\r\n        //setText a parameter of an empty string\r\n        setDay('')\r\n        //setDay a parameter of an empty string\r\n        setReminder(false)\r\n        //setReminder with a parameter of false\r\n    }\r\n\r\n    return (\r\n        <form className='add-form' onSubmit={onSubmit}>\r\n            <div className='form-control'>\r\n                <label>Task</label>\r\n                {/* label with the text of 'Task' */}\r\n                <input type='text' placeholder='Add Task' value={text} onChange={(e) => setText(e.target.value)} />\r\n                {/* input with a type of 'text', a placeholder of 'Add Task', a value of text, and onChange set as a funtion, with the parameter e, that activates the setText function, using e.target.value as the parameter */}\r\n            </div>\r\n            {/* div with className of 'form-control' */}\r\n            <div className='form-control'>\r\n                <label>Day & Time</label>\r\n                {/* label with the text of 'Day' */}\r\n                <input type='text' placeholder='Add Day & Time' value={day} onChange={(e) => setDay(e.target.value)} />\r\n                {/* input with a type of 'text', a placeholder of 'Add Day & Time', a value of day, and onChange set as a funtion, with the parameter e, that activates the setDay function, using e.target.value as the parameter */}\r\n            </div>\r\n            {/* div with className of 'form-control' */}\r\n            <div className='form-control form-control-check'>\r\n                <label>Set Reminder</label>\r\n                {/* label with the text of 'Set Reminder' */}\r\n                <input type='checkbox' checked={reminder} value={reminder} onChange={(e) => setReminder(e.currentTarget.checked)} />\r\n                {/* input with a type of 'checkbox', checked set to reminder, a value of reminder, and onChange set as a funtion, with the parameter e, that activates the setReminder function, using e.currentTarget.checked as the parameter */}\r\n            </div>\r\n            {/* div with className of 'form-control form-control-check' */}\r\n\r\n            <input type='submit' value='Save Task' className='btn btn-block' />\r\n            {/* input with a type of 'submit', a value of 'Save Task', and a className of 'btn btn-block' */}\r\n        </form>\r\n        // form with className of 'add-form' and onSubmit set as the onSubmit function\r\n        \r\n    )\r\n}\r\n\r\nexport default AddTask\r\n","import {Link} from 'react-router-dom'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <h4>Version 1.0.0</h4>\r\n            {/* h4 with its text set as 'Version 1.0.0' */}\r\n            <Link to='/'>Go Back</Link>\r\n            {/* Link for the footer with to set as '/' and its text set as 'Go Back' */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import {useState, useEffect} from 'react'\n//useState and useEffect imported\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\n//BrowserRouter, as Router, and Router imported\nimport Header from './components/Header'\n//Header component imported\nimport Footer from './components/Footer'\n//Footer component imported\nimport Tasks from './components/Tasks'\n//Tasks component imported\nimport AddTask from './components/AddTask'\n//AddTask component imported\nimport About from './components/About'\n//About component imported\n\nfunction App() {\n  const [showAddTask, setShowAddTask] = useState(false)\n  //variable of showAddTask, with a method of setShowAddTask, set as useState with a parameter of fals\n  const [tasks, setTasks] = useState([])\n  //tasks variable, with a method of setShowAddTask, set as an array with objects inside it\n  \n  var date = new Date()\n  //variable date set as the new date\n  date = date.toString().split(' ')\n  //date is turned into a string, with toString(), and split by its spaces, with split(' ')\n  date = `${date[1]} ${date[2]}, ${date[3]}`\n  //date is equal to the three dates after the first date in the date array, with `${date[1]} ${date[2]}, ${date[3]}`\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    }\n\n    getTasks()\n  }, [])\n  //useEffect function activated with a first parameter of a function, called getTasks, which, using the async and await keywords, creates a variable, called tasksFromServer, equal to the value returned by the fetchTasks function, which is used as the parameter of the setTasks function, followed by the getTasks function being activated. The useEffect function has an empty array as its second parameter\n\n  //Fetch Tasks\n  const fetchTasks = async () => {\n    const res = await fetch('http://localhost:5000/tasks')\n    const data = await res.json()\n\n    return data\n  }\n  //fetchTasks function, using the async and await keywords, is a function that creates two variables, with res being the fetched data from the tasks array, withing db.json, and data being equal to the res variable, parsed as a javascript object with the '.json()' object. This function also returns the data variable\n\n//Fetch Task\nconst fetchTask = async (id) => {\n  const res = await fetch(`http://localhost:5000/tasks/${id}`)\n  const data = await res.json()\n\n  return data\n}\n//fetchTask function, using the async and await keywords, is a function that creates two variables, with res being the tasks, identified by the clicked element's id, from the fetched data from the tasks array, withing db.json, and data being equal to the res variable, parsed as a javascript object with the '.json()' object. This function also returns the data variable\n  \n//Add Task\nconst addTask = async (task) => {\n  const res = await fetch('http://localhost:5000/tasks', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(task)\n  })\n  //res variable, using the await keyword, equal to the the fetched data from the tasks array, withing db.json, with method: 'POST', the 'Content-type', in headers, set to 'application/json', and the body set to, using JSON.stringify, a JSON string of the task being added\n\n  const data = await res.json();\n  //using the await keyword, data variable equal to the res variable, parsed as a javascript object with the '.json()' object\n\n  setTasks([...tasks, data])\n  //setTasks function activated with the tasks variable and the data variable\n}\n//addTask function uses the async keyword\n\n//Delete Task\nconst deleteTask = async (id) => {\n  await fetch(`http://localhost:5000/tasks/${id}`, {\n    method: 'DELETE',\n  })\n  //using the await keyword, the click element's id is used to access the db.json object, in the tasks array, that the id correlates to, and this object is deleted with method: 'DELETE'\n\n  setTasks(tasks.filter((task) => task.id !== id))\n  //filters the tasks variable, with tasks whose id is not equal to that of the task being clicked on\n}\n//deleteTask function uses the async keyword\n\n//Toggle Reminder\nconst toggleReminder = async (id) => {\n  const taskToToggle = await fetchTask(id)\n  //taskToToggle variable, using the await keyword, is equal to the returned value from the fetchTask function, using a paramerter of id\n  const updTask = {...taskToToggle, reminder: !taskToToggle.reminder}\n  //updTask variable is equal to the taskToToggle, and the reminder, set as the opposite of taskToToggle.reminder, with the NOT operator\n\n  const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(updTask)\n  })\n  //res variable, using the await keyword, equal to the the fetched data from the tasks array, withing db.json, with method: 'PUT', the 'Content-type', in headers, set to 'application/json', and the body set to, using JSON.stringify, a JSON string of the updated task being added\n\n  const data = await res.json()\n  //using the await keyword, data variable equal to the res variable, parsed as a javascript object with the '.json()' object\n  \n  setTasks(tasks.map((task) => task.id === id ? {...task, reminder: data.reminder} : task))\n  //for each task in the tasks variable, if the task's id matches that of the task clicked (the same task), that task is set as itself, along with the data's reminder value, otherwise, if the task's id is different, it is set to itself\n}\n//toggleReminder function uses the async keyword\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <p style={{fontSize: 'large'}}>Maverick Oleson</p>\n        {/* p with style{{fontSize}} set as large and the text set as 'Maverick Oleson' */}\n        <Header date={date} onAdd={() => setShowAddTask(!showAddTask)} showAdd={showAddTask} />\n        {/* Header component with date set as the date variable, onAdd set as a function that activates the setShowAddTask function with the parameter of the opposite of showAddTask, using the NOT function*/}\n        <Route path='/' exact render={(props) => (\n          <>\n            {showAddTask && <AddTask onAdd={addTask} />}\n            {/* if showAddTask is true, the AddTask component with an onAdd of addTask will appear*/}\n            {tasks.length > 0 ? <Tasks tasks={tasks} onDelete={deleteTask} onToggle={toggleReminder} /> : 'No Tasks to Show'}\n            {/* if the tasks variable's length is greater than 0, the Tasks component, with tasks set as the tasks variable, onDelete set as the deleteTask function, and onToggle set as the toggleReminder, appears, otherwise the text 'No Tasks to Show' appears*/}\n          </>\n        )} />\n        {/* Route component with path set as '/', exact set, and render set as a function, passing props as a parameter and containing two statements that generate elements or text */}\n        <Route path='/about' component={About} />\n        {/* Route component with path set as '/about and component set as the About component' */}\n        <Footer />\n        {/* Footer component */}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}